// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	context "context"
	strconv "strconv"

	database "code.drogo.gw.com/database"
	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

// MakeExecutableSchema creates an ExecutableSchema from the Resolvers interface.
func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(resolvers ResolverRoot) graphql.ExecutableSchema {
	return MakeExecutableSchema(shortMapper{r: resolvers})
}

type Resolvers interface {
	Mutation_activateEventByID(ctx context.Context, eventID string) (database.Response, error)
	Mutation_changeOrganizersStatus(ctx context.Context, organizerId string, status int, value bool) (database.Response, error)
	Mutation_createCategory(ctx context.Context, name string, description string, imageSize string, imageData string) (database.Response, error)
	Mutation_editCategory(ctx context.Context, id string, newName string, newDescription string, imageSize string, imageData string) (database.Response, error)
	Mutation_updateFeaturedEvent(ctx context.Context, id string, feature bool) (database.Response, error)
	Mutation_approveOrganizer(ctx context.Context, id string, organizer string, email string) (database.Response, error)
	Mutation_createNewEventType(ctx context.Context, eventTypeName string, desc string) (database.Response, error)
	Mutation_createNewJobPosition(ctx context.Context, name string, desc string) (database.Response, error)
	Mutation_createAreaOfInterest(ctx context.Context, name string, desc string) (database.Response, error)
	Mutation_createNewRegion(ctx context.Context, name string) (database.Response, error)
	Mutation_deactivateEventByID(ctx context.Context, eventID string) (database.Response, error)
	Mutation_markAsPaidByEventId(ctx context.Context, eventId string) (database.Response, error)
	Mutation_rejectOrganizerByID(ctx context.Context, id string, reason string, desc string) (database.Response, error)
	Mutation_updateJobPositionById(ctx context.Context, id int, name string, desc string) (database.Response, error)
	Mutation_updateAreaOfInterest(ctx context.Context, id int, name string, desc string) (database.Response, error)
	Mutation_updateRegionByID(ctx context.Context, id int, name string) (database.Response, error)
	Mutation_updateOrganizer(ctx context.Context, description string, website string, agreement_uid string, o_id string, fname string, lname string, salutation string, mobile string, blogUrl string, user_id string, etCommission float64, etNotes string) (database.Response, error)
	Mutation_updateEventType(ctx context.Context, id int, eventTypeName string, desc string) (database.Response, error)
	Mutation_updateGlobalEtCommissionRate(ctx context.Context, etCommission float64) (database.Response, error)
	Mutation_updateEventEtCommission(ctx context.Context, eventId string, etCommission float64) (database.Response, error)

	Query_getCategories(ctx context.Context, offset int) ([]database.Category, error)
	Query_getCategoryById(ctx context.Context, id string) (database.Category, error)
	Query_getEventList(ctx context.Context, offset int) ([]database.Event, error)
	Query_getOngoingEvents(ctx context.Context, offset int) ([]database.Event, error)
	Query_getTopEvents(ctx context.Context, duration string) ([]database.Event, error)
	Query_getEventById(ctx context.Context, id string) (database.Event, error)
	Query_getTicketList(ctx context.Context, offset int) ([]*database.Ticket, error)
	Query_getUserList(ctx context.Context, offset int) ([]database.User, error)
	Query_getEventTypeById(ctx context.Context, id int) (database.EventType, error)
	Query_getPositionByID(ctx context.Context, id int) (database.Position, error)
	Query_getOrganizerByID(ctx context.Context, id string) (database.OrganizerData, error)
	Query_getOrganizersEventList(ctx context.Context, id string, offset int) ([]database.Event, error)
	Query_getInterestByID(ctx context.Context, id int) (database.Interest, error)
	Query_getPayoutDetails(ctx context.Context, offset int) ([]database.Payout, error)
	Query_getRegionByID(ctx context.Context, id int) (database.Region, error)
	Query_getUserProfilesCount(ctx context.Context) (int, error)
	Query_getOrganizerProfilesCount(ctx context.Context) (int, error)
	Query_getTotalEventsCreated(ctx context.Context) (int, error)
	Query_getRecentEvents(ctx context.Context) ([]database.Event, error)
	Query_totalEtEarnings(ctx context.Context) (string, error)
	Query_getEventAttendees(ctx context.Context, eventId string, organizerId string, offset int) ([]database.Attendee, error)
	Query_getApprovedOrganizersList(ctx context.Context) ([]database.OrganizerProfile, error)
	Query_getGlobalEtCommissionRate(ctx context.Context) (float64, error)
	Query_getOrganizersReport(ctx context.Context, offset int) ([]database.OrganizerProfile, error)
	Query_getEventPageHitsByID(ctx context.Context, eventId string) (int, error)
	Query_listOfInterests(ctx context.Context, offset int) ([]database.Interest, error)
	Query_listEventTypes(ctx context.Context, offset int) ([]database.EventType, error)
	Query_listPositions(ctx context.Context, offset int) ([]database.Position, error)
	Query_listRegions(ctx context.Context, offset int) ([]database.Region, error)
	Query_reportsEventList(ctx context.Context, id string) ([]database.Event, error)
	Query_organizerProfileList(ctx context.Context, status string, offset int) ([]database.OrganizerProfile, error)
	Query_upcomingPayouts(ctx context.Context, offset int, limit int) ([]database.Payout, error)
	Query_totalRevenueGenerated(ctx context.Context) (string, error)
	Query_getEventsOverview(ctx context.Context) (database.EventsOverview, error)
	Query_getEventSpecificReport(ctx context.Context, id string) (database.Event, error)
	Query_exhibitorEnquiriesCount(ctx context.Context, eventID string) (int, error)
	Query_sponsorEnquiriesCount(ctx context.Context, eventID string) (int, error)
	Query_totalBrochureRequests(ctx context.Context, eventID string) (int, error)
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}
type MutationResolver interface {
	ActivateEventByID(ctx context.Context, eventID string) (database.Response, error)
	ChangeOrganizersStatus(ctx context.Context, organizerId string, status int, value bool) (database.Response, error)
	CreateCategory(ctx context.Context, name string, description string, imageSize string, imageData string) (database.Response, error)
	EditCategory(ctx context.Context, id string, newName string, newDescription string, imageSize string, imageData string) (database.Response, error)
	UpdateFeaturedEvent(ctx context.Context, id string, feature bool) (database.Response, error)
	ApproveOrganizer(ctx context.Context, id string, organizer string, email string) (database.Response, error)
	CreateNewEventType(ctx context.Context, eventTypeName string, desc string) (database.Response, error)
	CreateNewJobPosition(ctx context.Context, name string, desc string) (database.Response, error)
	CreateAreaOfInterest(ctx context.Context, name string, desc string) (database.Response, error)
	CreateNewRegion(ctx context.Context, name string) (database.Response, error)
	DeactivateEventByID(ctx context.Context, eventID string) (database.Response, error)
	MarkAsPaidByEventId(ctx context.Context, eventId string) (database.Response, error)
	RejectOrganizerByID(ctx context.Context, id string, reason string, desc string) (database.Response, error)
	UpdateJobPositionById(ctx context.Context, id int, name string, desc string) (database.Response, error)
	UpdateAreaOfInterest(ctx context.Context, id int, name string, desc string) (database.Response, error)
	UpdateRegionByID(ctx context.Context, id int, name string) (database.Response, error)
	UpdateOrganizer(ctx context.Context, description string, website string, agreement_uid string, o_id string, fname string, lname string, salutation string, mobile string, blogUrl string, user_id string, etCommission float64, etNotes string) (database.Response, error)
	UpdateEventType(ctx context.Context, id int, eventTypeName string, desc string) (database.Response, error)
	UpdateGlobalEtCommissionRate(ctx context.Context, etCommission float64) (database.Response, error)
	UpdateEventEtCommission(ctx context.Context, eventId string, etCommission float64) (database.Response, error)
}
type QueryResolver interface {
	GetCategories(ctx context.Context, offset int) ([]database.Category, error)
	GetCategoryById(ctx context.Context, id string) (database.Category, error)
	GetEventList(ctx context.Context, offset int) ([]database.Event, error)
	GetOngoingEvents(ctx context.Context, offset int) ([]database.Event, error)
	GetTopEvents(ctx context.Context, duration string) ([]database.Event, error)
	GetEventById(ctx context.Context, id string) (database.Event, error)
	GetTicketList(ctx context.Context, offset int) ([]*database.Ticket, error)
	GetUserList(ctx context.Context, offset int) ([]database.User, error)
	GetEventTypeById(ctx context.Context, id int) (database.EventType, error)
	GetPositionByID(ctx context.Context, id int) (database.Position, error)
	GetOrganizerByID(ctx context.Context, id string) (database.OrganizerData, error)
	GetOrganizersEventList(ctx context.Context, id string, offset int) ([]database.Event, error)
	GetInterestByID(ctx context.Context, id int) (database.Interest, error)
	GetPayoutDetails(ctx context.Context, offset int) ([]database.Payout, error)
	GetRegionByID(ctx context.Context, id int) (database.Region, error)
	GetUserProfilesCount(ctx context.Context) (int, error)
	GetOrganizerProfilesCount(ctx context.Context) (int, error)
	GetTotalEventsCreated(ctx context.Context) (int, error)
	GetRecentEvents(ctx context.Context) ([]database.Event, error)
	TotalEtEarnings(ctx context.Context) (string, error)
	GetEventAttendees(ctx context.Context, eventId string, organizerId string, offset int) ([]database.Attendee, error)
	GetApprovedOrganizersList(ctx context.Context) ([]database.OrganizerProfile, error)
	GetGlobalEtCommissionRate(ctx context.Context) (float64, error)
	GetOrganizersReport(ctx context.Context, offset int) ([]database.OrganizerProfile, error)
	GetEventPageHitsByID(ctx context.Context, eventId string) (int, error)
	ListOfInterests(ctx context.Context, offset int) ([]database.Interest, error)
	ListEventTypes(ctx context.Context, offset int) ([]database.EventType, error)
	ListPositions(ctx context.Context, offset int) ([]database.Position, error)
	ListRegions(ctx context.Context, offset int) ([]database.Region, error)
	ReportsEventList(ctx context.Context, id string) ([]database.Event, error)
	OrganizerProfileList(ctx context.Context, status string, offset int) ([]database.OrganizerProfile, error)
	UpcomingPayouts(ctx context.Context, offset int, limit int) ([]database.Payout, error)
	TotalRevenueGenerated(ctx context.Context) (string, error)
	GetEventsOverview(ctx context.Context) (database.EventsOverview, error)
	GetEventSpecificReport(ctx context.Context, id string) (database.Event, error)
	ExhibitorEnquiriesCount(ctx context.Context, eventID string) (int, error)
	SponsorEnquiriesCount(ctx context.Context, eventID string) (int, error)
	TotalBrochureRequests(ctx context.Context, eventID string) (int, error)
}

type shortMapper struct {
	r ResolverRoot
}

func (s shortMapper) Mutation_activateEventByID(ctx context.Context, eventID string) (database.Response, error) {
	return s.r.Mutation().ActivateEventByID(ctx, eventID)
}

func (s shortMapper) Mutation_changeOrganizersStatus(ctx context.Context, organizerId string, status int, value bool) (database.Response, error) {
	return s.r.Mutation().ChangeOrganizersStatus(ctx, organizerId, status, value)
}

func (s shortMapper) Mutation_createCategory(ctx context.Context, name string, description string, imageSize string, imageData string) (database.Response, error) {
	return s.r.Mutation().CreateCategory(ctx, name, description, imageSize, imageData)
}

func (s shortMapper) Mutation_editCategory(ctx context.Context, id string, newName string, newDescription string, imageSize string, imageData string) (database.Response, error) {
	return s.r.Mutation().EditCategory(ctx, id, newName, newDescription, imageSize, imageData)
}

func (s shortMapper) Mutation_updateFeaturedEvent(ctx context.Context, id string, feature bool) (database.Response, error) {
	return s.r.Mutation().UpdateFeaturedEvent(ctx, id, feature)
}

func (s shortMapper) Mutation_approveOrganizer(ctx context.Context, id string, organizer string, email string) (database.Response, error) {
	return s.r.Mutation().ApproveOrganizer(ctx, id, organizer, email)
}

func (s shortMapper) Mutation_createNewEventType(ctx context.Context, eventTypeName string, desc string) (database.Response, error) {
	return s.r.Mutation().CreateNewEventType(ctx, eventTypeName, desc)
}

func (s shortMapper) Mutation_createNewJobPosition(ctx context.Context, name string, desc string) (database.Response, error) {
	return s.r.Mutation().CreateNewJobPosition(ctx, name, desc)
}

func (s shortMapper) Mutation_createAreaOfInterest(ctx context.Context, name string, desc string) (database.Response, error) {
	return s.r.Mutation().CreateAreaOfInterest(ctx, name, desc)
}

func (s shortMapper) Mutation_createNewRegion(ctx context.Context, name string) (database.Response, error) {
	return s.r.Mutation().CreateNewRegion(ctx, name)
}

func (s shortMapper) Mutation_deactivateEventByID(ctx context.Context, eventID string) (database.Response, error) {
	return s.r.Mutation().DeactivateEventByID(ctx, eventID)
}

func (s shortMapper) Mutation_markAsPaidByEventId(ctx context.Context, eventId string) (database.Response, error) {
	return s.r.Mutation().MarkAsPaidByEventId(ctx, eventId)
}

func (s shortMapper) Mutation_rejectOrganizerByID(ctx context.Context, id string, reason string, desc string) (database.Response, error) {
	return s.r.Mutation().RejectOrganizerByID(ctx, id, reason, desc)
}

func (s shortMapper) Mutation_updateJobPositionById(ctx context.Context, id int, name string, desc string) (database.Response, error) {
	return s.r.Mutation().UpdateJobPositionById(ctx, id, name, desc)
}

func (s shortMapper) Mutation_updateAreaOfInterest(ctx context.Context, id int, name string, desc string) (database.Response, error) {
	return s.r.Mutation().UpdateAreaOfInterest(ctx, id, name, desc)
}

func (s shortMapper) Mutation_updateRegionByID(ctx context.Context, id int, name string) (database.Response, error) {
	return s.r.Mutation().UpdateRegionByID(ctx, id, name)
}

func (s shortMapper) Mutation_updateOrganizer(ctx context.Context, description string, website string, agreement_uid string, o_id string, fname string, lname string, salutation string, mobile string, blogUrl string, user_id string, etCommission float64, etNotes string) (database.Response, error) {
	return s.r.Mutation().UpdateOrganizer(ctx, description, website, agreement_uid, o_id, fname, lname, salutation, mobile, blogUrl, user_id, etCommission, etNotes)
}

func (s shortMapper) Mutation_updateEventType(ctx context.Context, id int, eventTypeName string, desc string) (database.Response, error) {
	return s.r.Mutation().UpdateEventType(ctx, id, eventTypeName, desc)
}

func (s shortMapper) Mutation_updateGlobalEtCommissionRate(ctx context.Context, etCommission float64) (database.Response, error) {
	return s.r.Mutation().UpdateGlobalEtCommissionRate(ctx, etCommission)
}

func (s shortMapper) Mutation_updateEventEtCommission(ctx context.Context, eventId string, etCommission float64) (database.Response, error) {
	return s.r.Mutation().UpdateEventEtCommission(ctx, eventId, etCommission)
}

func (s shortMapper) Query_getCategories(ctx context.Context, offset int) ([]database.Category, error) {
	return s.r.Query().GetCategories(ctx, offset)
}

func (s shortMapper) Query_getCategoryById(ctx context.Context, id string) (database.Category, error) {
	return s.r.Query().GetCategoryById(ctx, id)
}

func (s shortMapper) Query_getEventList(ctx context.Context, offset int) ([]database.Event, error) {
	return s.r.Query().GetEventList(ctx, offset)
}

func (s shortMapper) Query_getOngoingEvents(ctx context.Context, offset int) ([]database.Event, error) {
	return s.r.Query().GetOngoingEvents(ctx, offset)
}

func (s shortMapper) Query_getTopEvents(ctx context.Context, duration string) ([]database.Event, error) {
	return s.r.Query().GetTopEvents(ctx, duration)
}

func (s shortMapper) Query_getEventById(ctx context.Context, id string) (database.Event, error) {
	return s.r.Query().GetEventById(ctx, id)
}

func (s shortMapper) Query_getTicketList(ctx context.Context, offset int) ([]*database.Ticket, error) {
	return s.r.Query().GetTicketList(ctx, offset)
}

func (s shortMapper) Query_getUserList(ctx context.Context, offset int) ([]database.User, error) {
	return s.r.Query().GetUserList(ctx, offset)
}

func (s shortMapper) Query_getEventTypeById(ctx context.Context, id int) (database.EventType, error) {
	return s.r.Query().GetEventTypeById(ctx, id)
}

func (s shortMapper) Query_getPositionByID(ctx context.Context, id int) (database.Position, error) {
	return s.r.Query().GetPositionByID(ctx, id)
}

func (s shortMapper) Query_getOrganizerByID(ctx context.Context, id string) (database.OrganizerData, error) {
	return s.r.Query().GetOrganizerByID(ctx, id)
}

func (s shortMapper) Query_getOrganizersEventList(ctx context.Context, id string, offset int) ([]database.Event, error) {
	return s.r.Query().GetOrganizersEventList(ctx, id, offset)
}

func (s shortMapper) Query_getInterestByID(ctx context.Context, id int) (database.Interest, error) {
	return s.r.Query().GetInterestByID(ctx, id)
}

func (s shortMapper) Query_getPayoutDetails(ctx context.Context, offset int) ([]database.Payout, error) {
	return s.r.Query().GetPayoutDetails(ctx, offset)
}

func (s shortMapper) Query_getRegionByID(ctx context.Context, id int) (database.Region, error) {
	return s.r.Query().GetRegionByID(ctx, id)
}

func (s shortMapper) Query_getUserProfilesCount(ctx context.Context) (int, error) {
	return s.r.Query().GetUserProfilesCount(ctx)
}

func (s shortMapper) Query_getOrganizerProfilesCount(ctx context.Context) (int, error) {
	return s.r.Query().GetOrganizerProfilesCount(ctx)
}

func (s shortMapper) Query_getTotalEventsCreated(ctx context.Context) (int, error) {
	return s.r.Query().GetTotalEventsCreated(ctx)
}

func (s shortMapper) Query_getRecentEvents(ctx context.Context) ([]database.Event, error) {
	return s.r.Query().GetRecentEvents(ctx)
}

func (s shortMapper) Query_totalEtEarnings(ctx context.Context) (string, error) {
	return s.r.Query().TotalEtEarnings(ctx)
}

func (s shortMapper) Query_getEventAttendees(ctx context.Context, eventId string, organizerId string, offset int) ([]database.Attendee, error) {
	return s.r.Query().GetEventAttendees(ctx, eventId, organizerId, offset)
}

func (s shortMapper) Query_getApprovedOrganizersList(ctx context.Context) ([]database.OrganizerProfile, error) {
	return s.r.Query().GetApprovedOrganizersList(ctx)
}

func (s shortMapper) Query_getGlobalEtCommissionRate(ctx context.Context) (float64, error) {
	return s.r.Query().GetGlobalEtCommissionRate(ctx)
}

func (s shortMapper) Query_getOrganizersReport(ctx context.Context, offset int) ([]database.OrganizerProfile, error) {
	return s.r.Query().GetOrganizersReport(ctx, offset)
}

func (s shortMapper) Query_getEventPageHitsByID(ctx context.Context, eventId string) (int, error) {
	return s.r.Query().GetEventPageHitsByID(ctx, eventId)
}

func (s shortMapper) Query_listOfInterests(ctx context.Context, offset int) ([]database.Interest, error) {
	return s.r.Query().ListOfInterests(ctx, offset)
}

func (s shortMapper) Query_listEventTypes(ctx context.Context, offset int) ([]database.EventType, error) {
	return s.r.Query().ListEventTypes(ctx, offset)
}

func (s shortMapper) Query_listPositions(ctx context.Context, offset int) ([]database.Position, error) {
	return s.r.Query().ListPositions(ctx, offset)
}

func (s shortMapper) Query_listRegions(ctx context.Context, offset int) ([]database.Region, error) {
	return s.r.Query().ListRegions(ctx, offset)
}

func (s shortMapper) Query_reportsEventList(ctx context.Context, id string) ([]database.Event, error) {
	return s.r.Query().ReportsEventList(ctx, id)
}

func (s shortMapper) Query_organizerProfileList(ctx context.Context, status string, offset int) ([]database.OrganizerProfile, error) {
	return s.r.Query().OrganizerProfileList(ctx, status, offset)
}

func (s shortMapper) Query_upcomingPayouts(ctx context.Context, offset int, limit int) ([]database.Payout, error) {
	return s.r.Query().UpcomingPayouts(ctx, offset, limit)
}

func (s shortMapper) Query_totalRevenueGenerated(ctx context.Context) (string, error) {
	return s.r.Query().TotalRevenueGenerated(ctx)
}

func (s shortMapper) Query_getEventsOverview(ctx context.Context) (database.EventsOverview, error) {
	return s.r.Query().GetEventsOverview(ctx)
}

func (s shortMapper) Query_getEventSpecificReport(ctx context.Context, id string) (database.Event, error) {
	return s.r.Query().GetEventSpecificReport(ctx, id)
}

func (s shortMapper) Query_exhibitorEnquiriesCount(ctx context.Context, eventID string) (int, error) {
	return s.r.Query().ExhibitorEnquiriesCount(ctx, eventID)
}

func (s shortMapper) Query_sponsorEnquiriesCount(ctx context.Context, eventID string) (int, error) {
	return s.r.Query().SponsorEnquiriesCount(ctx, eventID)
}

func (s shortMapper) Query_totalBrochureRequests(ctx context.Context, eventID string) (int, error) {
	return s.r.Query().TotalBrochureRequests(ctx, eventID)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var attendeeImplementors = []string{"Attendee"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Attendee(ctx context.Context, sel []query.Selection, obj *database.Attendee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, attendeeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attendee")
		case "attendee":
			out.Values[i] = ec._Attendee_attendee(ctx, field, obj)
		case "eventName":
			out.Values[i] = ec._Attendee_eventName(ctx, field, obj)
		case "organizerName":
			out.Values[i] = ec._Attendee_organizerName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Attendee_attendee(ctx context.Context, field graphql.CollectedField, obj *database.Attendee) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Attendee"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Attendee
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Attendee_eventName(ctx context.Context, field graphql.CollectedField, obj *database.Attendee) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Attendee"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Attendee_organizerName(ctx context.Context, field graphql.CollectedField, obj *database.Attendee) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Attendee"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrganizerName
	return graphql.MarshalString(res)
}

var categoryImplementors = []string{"Category"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Category(ctx context.Context, sel []query.Selection, obj *database.Category) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, categoryImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "id":
			out.Values[i] = ec._Category_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Category_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Category_description(ctx, field, obj)
		case "noOfEvents":
			out.Values[i] = ec._Category_noOfEvents(ctx, field, obj)
		case "imageData":
			out.Values[i] = ec._Category_imageData(ctx, field, obj)
		case "imageSize":
			out.Values[i] = ec._Category_imageSize(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Category_id(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Category_name(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Category_description(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Category_noOfEvents(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfEvents
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Category_imageData(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ImageData
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Category_imageSize(ctx context.Context, field graphql.CollectedField, obj *database.Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ImageSize
	return graphql.MarshalString(res)
}

var eventImplementors = []string{"Event"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Event(ctx context.Context, sel []query.Selection, obj *database.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Event_name(ctx, field, obj)
		case "imageData":
			out.Values[i] = ec._Event_imageData(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._Event_startDate(ctx, field, obj)
		case "startTime":
			out.Values[i] = ec._Event_startTime(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Event_endDate(ctx, field, obj)
		case "endTime":
			out.Values[i] = ec._Event_endTime(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Event_description(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Event_location(ctx, field, obj)
		case "organizerName":
			out.Values[i] = ec._Event_organizerName(ctx, field, obj)
		case "organizerId":
			out.Values[i] = ec._Event_organizerId(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._Event_userName(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Event_status(ctx, field, obj)
		case "publishDate":
			out.Values[i] = ec._Event_publishDate(ctx, field, obj)
		case "types":
			out.Values[i] = ec._Event_types(ctx, field, obj)
		case "categories":
			out.Values[i] = ec._Event_categories(ctx, field, obj)
		case "soldAmount":
			out.Values[i] = ec._Event_soldAmount(ctx, field, obj)
		case "ticketsSold":
			out.Values[i] = ec._Event_ticketsSold(ctx, field, obj)
		case "isFeatured":
			out.Values[i] = ec._Event_isFeatured(ctx, field, obj)
		case "venueCity":
			out.Values[i] = ec._Event_venueCity(ctx, field, obj)
		case "organizerID":
			out.Values[i] = ec._Event_organizerID(ctx, field, obj)
		case "revenue":
			out.Values[i] = ec._Event_revenue(ctx, field, obj)
		case "totalRevenue":
			out.Values[i] = ec._Event_totalRevenue(ctx, field, obj)
		case "ticketLiveDays":
			out.Values[i] = ec._Event_ticketLiveDays(ctx, field, obj)
		case "pageHits":
			out.Values[i] = ec._Event_pageHits(ctx, field, obj)
		case "deactivated":
			out.Values[i] = ec._Event_deactivated(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Event_currency(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Event_name(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_imageData(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ImageData
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_startDate(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.StartDate
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_startTime(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.StartTime
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_endDate(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EndDate
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_endTime(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EndTime
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_description(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_location(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Location
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_organizerName(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrganizerName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_organizerId(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrganizerId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Event_userName(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_status(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_publishDate(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PublishDate
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_types(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Event_categories(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Categories
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Event_soldAmount(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SoldAmount
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Event_ticketsSold(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TicketsSold
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Event_isFeatured(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsFeatured
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Event_venueCity(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.VenueCity
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_organizerID(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrganizerId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Event_revenue(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Revenue
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Event_totalRevenue(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalRevenue
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Event_ticketLiveDays(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TicketLiveDays
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Event_pageHits(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PageHits
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Event_deactivated(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Deactivated
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Event_currency(ctx context.Context, field graphql.CollectedField, obj *database.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Event"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Currency
	return graphql.MarshalString(res)
}

var eventTypeImplementors = []string{"EventType"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventType(ctx context.Context, sel []query.Selection, obj *database.EventType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventTypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventType")
		case "id":
			out.Values[i] = ec._EventType_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._EventType_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._EventType_description(ctx, field, obj)
		case "noOfEvents":
			out.Values[i] = ec._EventType_noOfEvents(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventType_id(ctx context.Context, field graphql.CollectedField, obj *database.EventType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _EventType_name(ctx context.Context, field graphql.CollectedField, obj *database.EventType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventType_description(ctx context.Context, field graphql.CollectedField, obj *database.EventType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _EventType_noOfEvents(ctx context.Context, field graphql.CollectedField, obj *database.EventType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfEvents
	return graphql.MarshalInt(res)
}

var eventsOverviewImplementors = []string{"EventsOverview"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventsOverview(ctx context.Context, sel []query.Selection, obj *database.EventsOverview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventsOverviewImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventsOverview")
		case "eventsHeld":
			out.Values[i] = ec._EventsOverview_eventsHeld(ctx, field, obj)
		case "ticketsSold":
			out.Values[i] = ec._EventsOverview_ticketsSold(ctx, field, obj)
		case "revenue":
			out.Values[i] = ec._EventsOverview_revenue(ctx, field, obj)
		case "totalRevenue":
			out.Values[i] = ec._EventsOverview_totalRevenue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventsOverview_eventsHeld(ctx context.Context, field graphql.CollectedField, obj *database.EventsOverview) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventsOverview"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventsHeld
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _EventsOverview_ticketsSold(ctx context.Context, field graphql.CollectedField, obj *database.EventsOverview) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventsOverview"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TicketsSold
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _EventsOverview_revenue(ctx context.Context, field graphql.CollectedField, obj *database.EventsOverview) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventsOverview"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Revenue
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _EventsOverview_totalRevenue(ctx context.Context, field graphql.CollectedField, obj *database.EventsOverview) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventsOverview"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalRevenue
	return graphql.MarshalString(res)
}

var interestImplementors = []string{"Interest"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Interest(ctx context.Context, sel []query.Selection, obj *database.Interest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, interestImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Interest")
		case "id":
			out.Values[i] = ec._Interest_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Interest_name(ctx, field, obj)
		case "noOfEvents":
			out.Values[i] = ec._Interest_noOfEvents(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Interest_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Interest_id(ctx context.Context, field graphql.CollectedField, obj *database.Interest) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Interest"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Interest_name(ctx context.Context, field graphql.CollectedField, obj *database.Interest) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Interest"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Interest_noOfEvents(ctx context.Context, field graphql.CollectedField, obj *database.Interest) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Interest"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfEvents
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Interest_description(ctx context.Context, field graphql.CollectedField, obj *database.Interest) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Interest"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, mutationImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "activateEventByID":
			out.Values[i] = ec._Mutation_activateEventByID(ctx, field)
		case "changeOrganizersStatus":
			out.Values[i] = ec._Mutation_changeOrganizersStatus(ctx, field)
		case "createCategory":
			out.Values[i] = ec._Mutation_createCategory(ctx, field)
		case "editCategory":
			out.Values[i] = ec._Mutation_editCategory(ctx, field)
		case "updateFeaturedEvent":
			out.Values[i] = ec._Mutation_updateFeaturedEvent(ctx, field)
		case "approveOrganizer":
			out.Values[i] = ec._Mutation_approveOrganizer(ctx, field)
		case "createNewEventType":
			out.Values[i] = ec._Mutation_createNewEventType(ctx, field)
		case "createNewJobPosition":
			out.Values[i] = ec._Mutation_createNewJobPosition(ctx, field)
		case "createAreaOfInterest":
			out.Values[i] = ec._Mutation_createAreaOfInterest(ctx, field)
		case "createNewRegion":
			out.Values[i] = ec._Mutation_createNewRegion(ctx, field)
		case "deactivateEventByID":
			out.Values[i] = ec._Mutation_deactivateEventByID(ctx, field)
		case "markAsPaidByEventId":
			out.Values[i] = ec._Mutation_markAsPaidByEventId(ctx, field)
		case "rejectOrganizerByID":
			out.Values[i] = ec._Mutation_rejectOrganizerByID(ctx, field)
		case "updateJobPositionById":
			out.Values[i] = ec._Mutation_updateJobPositionById(ctx, field)
		case "updateAreaOfInterest":
			out.Values[i] = ec._Mutation_updateAreaOfInterest(ctx, field)
		case "updateRegionByID":
			out.Values[i] = ec._Mutation_updateRegionByID(ctx, field)
		case "updateOrganizer":
			out.Values[i] = ec._Mutation_updateOrganizer(ctx, field)
		case "updateEventType":
			out.Values[i] = ec._Mutation_updateEventType(ctx, field)
		case "updateGlobalEtCommissionRate":
			out.Values[i] = ec._Mutation_updateGlobalEtCommissionRate(ctx, field)
		case "updateEventEtCommission":
			out.Values[i] = ec._Mutation_updateEventEtCommission(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_activateEventByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_activateEventByID(ctx, args["eventID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_changeOrganizersStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["organizerId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["organizerId"] = arg0
	var arg1 int
	if tmp, ok := field.Args["status"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg1
	var arg2 bool
	if tmp, ok := field.Args["value"]; ok {
		var err error
		arg2, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["value"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_changeOrganizersStatus(ctx, args["organizerId"].(string), args["status"].(int), args["value"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_createCategory(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["description"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["description"] = arg1
	var arg2 string
	if tmp, ok := field.Args["imageSize"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["imageSize"] = arg2
	var arg3 string
	if tmp, ok := field.Args["imageData"]; ok {
		var err error
		arg3, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["imageData"] = arg3
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createCategory(ctx, args["name"].(string), args["description"].(string), args["imageSize"].(string), args["imageData"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_editCategory(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["newName"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["newName"] = arg1
	var arg2 string
	if tmp, ok := field.Args["newDescription"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["newDescription"] = arg2
	var arg3 string
	if tmp, ok := field.Args["imageSize"]; ok {
		var err error
		arg3, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["imageSize"] = arg3
	var arg4 string
	if tmp, ok := field.Args["imageData"]; ok {
		var err error
		arg4, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["imageData"] = arg4
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_editCategory(ctx, args["id"].(string), args["newName"].(string), args["newDescription"].(string), args["imageSize"].(string), args["imageData"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateFeaturedEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := field.Args["feature"]; ok {
		var err error
		arg1, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["feature"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateFeaturedEvent(ctx, args["id"].(string), args["feature"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_approveOrganizer(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["organizer"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["organizer"] = arg1
	var arg2 string
	if tmp, ok := field.Args["email"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["email"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_approveOrganizer(ctx, args["id"].(string), args["organizer"].(string), args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_createNewEventType(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventTypeName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventTypeName"] = arg0
	var arg1 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createNewEventType(ctx, args["eventTypeName"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_createNewJobPosition(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createNewJobPosition(ctx, args["name"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_createAreaOfInterest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createAreaOfInterest(ctx, args["name"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_createNewRegion(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createNewRegion(ctx, args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_deactivateEventByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deactivateEventByID(ctx, args["eventID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_markAsPaidByEventId(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventId"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_markAsPaidByEventId(ctx, args["eventId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_rejectOrganizerByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["reason"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["reason"] = arg1
	var arg2 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_rejectOrganizerByID(ctx, args["id"].(string), args["reason"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateJobPositionById(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg1
	var arg2 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateJobPositionById(ctx, args["id"].(int), args["name"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateAreaOfInterest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg1
	var arg2 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateAreaOfInterest(ctx, args["id"].(int), args["name"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateRegionByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateRegionByID(ctx, args["id"].(int), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateOrganizer(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["description"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["description"] = arg0
	var arg1 string
	if tmp, ok := field.Args["website"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["website"] = arg1
	var arg2 string
	if tmp, ok := field.Args["agreement_uid"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["agreement_uid"] = arg2
	var arg3 string
	if tmp, ok := field.Args["o_id"]; ok {
		var err error
		arg3, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["o_id"] = arg3
	var arg4 string
	if tmp, ok := field.Args["fname"]; ok {
		var err error
		arg4, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["fname"] = arg4
	var arg5 string
	if tmp, ok := field.Args["lname"]; ok {
		var err error
		arg5, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["lname"] = arg5
	var arg6 string
	if tmp, ok := field.Args["salutation"]; ok {
		var err error
		arg6, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["salutation"] = arg6
	var arg7 string
	if tmp, ok := field.Args["mobile"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["mobile"] = arg7
	var arg8 string
	if tmp, ok := field.Args["blogUrl"]; ok {
		var err error
		arg8, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["blogUrl"] = arg8
	var arg9 string
	if tmp, ok := field.Args["user_id"]; ok {
		var err error
		arg9, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["user_id"] = arg9
	var arg10 float64
	if tmp, ok := field.Args["etCommission"]; ok {
		var err error
		arg10, err = graphql.UnmarshalFloat(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["etCommission"] = arg10
	var arg11 string
	if tmp, ok := field.Args["etNotes"]; ok {
		var err error
		arg11, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["etNotes"] = arg11
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateOrganizer(ctx, args["description"].(string), args["website"].(string), args["agreement_uid"].(string), args["o_id"].(string), args["fname"].(string), args["lname"].(string), args["salutation"].(string), args["mobile"].(string), args["blogUrl"].(string), args["user_id"].(string), args["etCommission"].(float64), args["etNotes"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateEventType(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := field.Args["eventTypeName"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventTypeName"] = arg1
	var arg2 string
	if tmp, ok := field.Args["desc"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["desc"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateEventType(ctx, args["id"].(int), args["eventTypeName"].(string), args["desc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateGlobalEtCommissionRate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := field.Args["etCommission"]; ok {
		var err error
		arg0, err = graphql.UnmarshalFloat(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["etCommission"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateGlobalEtCommissionRate(ctx, args["etCommission"].(float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_updateEventEtCommission(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventId"] = arg0
	var arg1 float64
	if tmp, ok := field.Args["etCommission"]; ok {
		var err error
		arg1, err = graphql.UnmarshalFloat(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["etCommission"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateEventEtCommission(ctx, args["eventId"].(string), args["etCommission"].(float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(database.Response)
	return ec._Response(ctx, field.Selections, &res)
}

var organizerDataImplementors = []string{"OrganizerData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _OrganizerData(ctx context.Context, sel []query.Selection, obj *database.OrganizerData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, organizerDataImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizerData")
		case "agreementId":
			out.Values[i] = ec._OrganizerData_agreementId(ctx, field, obj)
		case "uploadId":
			out.Values[i] = ec._OrganizerData_uploadId(ctx, field, obj)
		case "organizerProfile":
			out.Values[i] = ec._OrganizerData_organizerProfile(ctx, field, obj)
		case "userProfile":
			out.Values[i] = ec._OrganizerData_userProfile(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _OrganizerData_agreementId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AgreementId
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerData_uploadId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UploadId
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerData_organizerProfile(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrganizerProfile
	return ec._OrganizerProfile(ctx, field.Selections, &res)
}

func (ec *executionContext) _OrganizerData_userProfile(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserProfile
	return ec._User(ctx, field.Selections, &res)
}

var organizerProfileImplementors = []string{"OrganizerProfile"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _OrganizerProfile(ctx context.Context, sel []query.Selection, obj *database.OrganizerProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, organizerProfileImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizerProfile")
		case "id":
			out.Values[i] = ec._OrganizerProfile_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._OrganizerProfile_name(ctx, field, obj)
		case "userFirstName":
			out.Values[i] = ec._OrganizerProfile_userFirstName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._OrganizerProfile_description(ctx, field, obj)
		case "website":
			out.Values[i] = ec._OrganizerProfile_website(ctx, field, obj)
		case "status":
			out.Values[i] = ec._OrganizerProfile_status(ctx, field, obj)
		case "bankId":
			out.Values[i] = ec._OrganizerProfile_bankId(ctx, field, obj)
		case "billingId":
			out.Values[i] = ec._OrganizerProfile_billingId(ctx, field, obj)
		case "uploadId":
			out.Values[i] = ec._OrganizerProfile_uploadId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._OrganizerProfile_userId(ctx, field, obj)
		case "agreementUploadId":
			out.Values[i] = ec._OrganizerProfile_agreementUploadId(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._OrganizerProfile_isActive(ctx, field, obj)
		case "etEarnings":
			out.Values[i] = ec._OrganizerProfile_etEarnings(ctx, field, obj)
		case "revenue":
			out.Values[i] = ec._OrganizerProfile_revenue(ctx, field, obj)
		case "totalEtEarning":
			out.Values[i] = ec._OrganizerProfile_totalEtEarning(ctx, field, obj)
		case "revenueGenerated":
			out.Values[i] = ec._OrganizerProfile_revenueGenerated(ctx, field, obj)
		case "etCommission":
			out.Values[i] = ec._OrganizerProfile_etCommission(ctx, field, obj)
		case "eventsCount":
			out.Values[i] = ec._OrganizerProfile_eventsCount(ctx, field, obj)
		case "etNotes":
			out.Values[i] = ec._OrganizerProfile_etNotes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _OrganizerProfile_id(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizerProfile_name(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_userFirstName(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserFirstName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_description(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_website(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Website
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_status(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_bankId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.BankId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizerProfile_billingId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.BillingId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizerProfile_uploadId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UploadId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizerProfile_userId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizerProfile_agreementUploadId(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AgreementUploadId
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_isActive(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsActive
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrganizerProfile_etEarnings(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EtEarnings
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _OrganizerProfile_revenue(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Revenue
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _OrganizerProfile_totalEtEarning(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalEtEarning
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_revenueGenerated(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RevenueGenerated
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrganizerProfile_etCommission(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EtCommission
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _OrganizerProfile_eventsCount(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventsCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrganizerProfile_etNotes(ctx context.Context, field graphql.CollectedField, obj *database.OrganizerProfile) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizerProfile"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EtNotes
	return graphql.MarshalString(res)
}

var payoutImplementors = []string{"Payout"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Payout(ctx context.Context, sel []query.Selection, obj *database.Payout) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, payoutImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payout")
		case "id":
			out.Values[i] = ec._Payout_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Payout_name(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Payout_endDate(ctx, field, obj)
		case "sold":
			out.Values[i] = ec._Payout_sold(ctx, field, obj)
		case "saleAmount":
			out.Values[i] = ec._Payout_saleAmount(ctx, field, obj)
		case "totalSaleAmount":
			out.Values[i] = ec._Payout_totalSaleAmount(ctx, field, obj)
		case "taxAmount":
			out.Values[i] = ec._Payout_taxAmount(ctx, field, obj)
		case "totalTaxAmount":
			out.Values[i] = ec._Payout_totalTaxAmount(ctx, field, obj)
		case "etShare":
			out.Values[i] = ec._Payout_etShare(ctx, field, obj)
		case "totalEtShare":
			out.Values[i] = ec._Payout_totalEtShare(ctx, field, obj)
		case "payoutAmount":
			out.Values[i] = ec._Payout_payoutAmount(ctx, field, obj)
		case "totalPayoutAmount":
			out.Values[i] = ec._Payout_totalPayoutAmount(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Payout_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Payout_id(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Payout_name(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_endDate(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EndDate
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_sold(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Sold
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Payout_saleAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SaleAmount
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Payout_totalSaleAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalSaleAmount
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_taxAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TaxAmount
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Payout_totalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalTaxAmount
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_etShare(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EtShare
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Payout_totalEtShare(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalEtShare
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_payoutAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PayoutAmount
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Payout_totalPayoutAmount(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalPayoutAmount
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Payout_status(ctx context.Context, field graphql.CollectedField, obj *database.Payout) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Payout"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return graphql.MarshalString(res)
}

var positionImplementors = []string{"Position"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Position(ctx context.Context, sel []query.Selection, obj *database.Position) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, positionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Position")
		case "id":
			out.Values[i] = ec._Position_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Position_name(ctx, field, obj)
		case "noOfEvents":
			out.Values[i] = ec._Position_noOfEvents(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Position_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Position_id(ctx context.Context, field graphql.CollectedField, obj *database.Position) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Position"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Position_name(ctx context.Context, field graphql.CollectedField, obj *database.Position) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Position"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Position_noOfEvents(ctx context.Context, field graphql.CollectedField, obj *database.Position) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Position"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfEvents
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Position_description(ctx context.Context, field graphql.CollectedField, obj *database.Position) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Position"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getCategories":
			out.Values[i] = ec._Query_getCategories(ctx, field)
		case "getCategoryById":
			out.Values[i] = ec._Query_getCategoryById(ctx, field)
		case "getEventList":
			out.Values[i] = ec._Query_getEventList(ctx, field)
		case "getOngoingEvents":
			out.Values[i] = ec._Query_getOngoingEvents(ctx, field)
		case "getTopEvents":
			out.Values[i] = ec._Query_getTopEvents(ctx, field)
		case "getEventById":
			out.Values[i] = ec._Query_getEventById(ctx, field)
		case "getTicketList":
			out.Values[i] = ec._Query_getTicketList(ctx, field)
		case "getUserList":
			out.Values[i] = ec._Query_getUserList(ctx, field)
		case "getEventTypeById":
			out.Values[i] = ec._Query_getEventTypeById(ctx, field)
		case "getPositionByID":
			out.Values[i] = ec._Query_getPositionByID(ctx, field)
		case "getOrganizerByID":
			out.Values[i] = ec._Query_getOrganizerByID(ctx, field)
		case "getOrganizersEventList":
			out.Values[i] = ec._Query_getOrganizersEventList(ctx, field)
		case "getInterestByID":
			out.Values[i] = ec._Query_getInterestByID(ctx, field)
		case "getPayoutDetails":
			out.Values[i] = ec._Query_getPayoutDetails(ctx, field)
		case "getRegionByID":
			out.Values[i] = ec._Query_getRegionByID(ctx, field)
		case "getUserProfilesCount":
			out.Values[i] = ec._Query_getUserProfilesCount(ctx, field)
		case "getOrganizerProfilesCount":
			out.Values[i] = ec._Query_getOrganizerProfilesCount(ctx, field)
		case "getTotalEventsCreated":
			out.Values[i] = ec._Query_getTotalEventsCreated(ctx, field)
		case "getRecentEvents":
			out.Values[i] = ec._Query_getRecentEvents(ctx, field)
		case "totalEtEarnings":
			out.Values[i] = ec._Query_totalEtEarnings(ctx, field)
		case "getEventAttendees":
			out.Values[i] = ec._Query_getEventAttendees(ctx, field)
		case "getApprovedOrganizersList":
			out.Values[i] = ec._Query_getApprovedOrganizersList(ctx, field)
		case "getGlobalEtCommissionRate":
			out.Values[i] = ec._Query_getGlobalEtCommissionRate(ctx, field)
		case "getOrganizersReport":
			out.Values[i] = ec._Query_getOrganizersReport(ctx, field)
		case "getEventPageHitsByID":
			out.Values[i] = ec._Query_getEventPageHitsByID(ctx, field)
		case "listOfInterests":
			out.Values[i] = ec._Query_listOfInterests(ctx, field)
		case "listEventTypes":
			out.Values[i] = ec._Query_listEventTypes(ctx, field)
		case "listPositions":
			out.Values[i] = ec._Query_listPositions(ctx, field)
		case "listRegions":
			out.Values[i] = ec._Query_listRegions(ctx, field)
		case "reportsEventList":
			out.Values[i] = ec._Query_reportsEventList(ctx, field)
		case "organizerProfileList":
			out.Values[i] = ec._Query_organizerProfileList(ctx, field)
		case "upcomingPayouts":
			out.Values[i] = ec._Query_upcomingPayouts(ctx, field)
		case "totalRevenueGenerated":
			out.Values[i] = ec._Query_totalRevenueGenerated(ctx, field)
		case "getEventsOverview":
			out.Values[i] = ec._Query_getEventsOverview(ctx, field)
		case "getEventSpecificReport":
			out.Values[i] = ec._Query_getEventSpecificReport(ctx, field)
		case "exhibitorEnquiriesCount":
			out.Values[i] = ec._Query_exhibitorEnquiriesCount(ctx, field)
		case "sponsorEnquiriesCount":
			out.Values[i] = ec._Query_sponsorEnquiriesCount(ctx, field)
		case "totalBrochureRequests":
			out.Values[i] = ec._Query_totalBrochureRequests(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_getCategories(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getCategories(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Category)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Category(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getCategoryById(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getCategoryById(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Category)
		return ec._Category(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getEventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventList(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getOngoingEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getOngoingEvents(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getTopEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["duration"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["duration"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getTopEvents(ctx, args["duration"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getEventById(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventById(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Event)
		return ec._Event(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getTicketList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getTicketList(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*database.Ticket)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._Ticket(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getUserList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getUserList(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.User)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._User(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getEventTypeById(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventTypeById(ctx, args["id"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.EventType)
		return ec._EventType(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getPositionByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getPositionByID(ctx, args["id"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Position)
		return ec._Position(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getOrganizerByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getOrganizerByID(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.OrganizerData)
		return ec._OrganizerData(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getOrganizersEventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getOrganizersEventList(ctx, args["id"].(string), args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getInterestByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getInterestByID(ctx, args["id"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Interest)
		return ec._Interest(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getPayoutDetails(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getPayoutDetails(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Payout)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Payout(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getRegionByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getRegionByID(ctx, args["id"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Region)
		return ec._Region(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getUserProfilesCount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getUserProfilesCount(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_getOrganizerProfilesCount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getOrganizerProfilesCount(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_getTotalEventsCreated(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getTotalEventsCreated(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_getRecentEvents(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getRecentEvents(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_totalEtEarnings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_totalEtEarnings(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Query_getEventAttendees(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventId"] = arg0
	var arg1 string
	if tmp, ok := field.Args["organizerId"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["organizerId"] = arg1
	var arg2 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg2, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventAttendees(ctx, args["eventId"].(string), args["organizerId"].(string), args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Attendee)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Attendee(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getApprovedOrganizersList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getApprovedOrganizersList(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.OrganizerProfile)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._OrganizerProfile(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getGlobalEtCommissionRate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getGlobalEtCommissionRate(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(float64)
		return graphql.MarshalFloat(res)
	})
}

func (ec *executionContext) _Query_getOrganizersReport(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getOrganizersReport(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.OrganizerProfile)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._OrganizerProfile(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getEventPageHitsByID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventPageHitsByID(ctx, args["eventId"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_listOfInterests(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_listOfInterests(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Interest)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Interest(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listEventTypes(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_listEventTypes(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.EventType)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._EventType(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listPositions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_listPositions(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Position)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Position(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listRegions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_listRegions(ctx, args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Region)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Region(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_reportsEventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_reportsEventList(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Event(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_organizerProfileList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["status"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg0
	var arg1 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_organizerProfileList(ctx, args["status"].(string), args["offset"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.OrganizerProfile)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._OrganizerProfile(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_upcomingPayouts(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg0
	var arg1 int
	if tmp, ok := field.Args["limit"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limit"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_upcomingPayouts(ctx, args["offset"].(int), args["limit"].(int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]database.Payout)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Payout(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_totalRevenueGenerated(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_totalRevenueGenerated(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _Query_getEventsOverview(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventsOverview(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.EventsOverview)
		return ec._EventsOverview(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getEventSpecificReport(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_getEventSpecificReport(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(database.Event)
		return ec._Event(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_exhibitorEnquiriesCount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventID"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_exhibitorEnquiriesCount(ctx, args["eventID"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_sponsorEnquiriesCount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventID"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_sponsorEnquiriesCount(ctx, args["eventID"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query_totalBrochureRequests(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["eventID"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["eventID"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_totalBrochureRequests(ctx, args["eventID"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var regionImplementors = []string{"Region"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Region(ctx context.Context, sel []query.Selection, obj *database.Region) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, regionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Region")
		case "id":
			out.Values[i] = ec._Region_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Region_name(ctx, field, obj)
		case "noOfEvents":
			out.Values[i] = ec._Region_noOfEvents(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Region_id(ctx context.Context, field graphql.CollectedField, obj *database.Region) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Region"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Id
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Region_name(ctx context.Context, field graphql.CollectedField, obj *database.Region) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Region"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Region_noOfEvents(ctx context.Context, field graphql.CollectedField, obj *database.Region) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Region"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfEvents
	return graphql.MarshalInt(res)
}

var responseImplementors = []string{"Response"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Response(ctx context.Context, sel []query.Selection, obj *database.Response) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, responseImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Response")
		case "status":
			out.Values[i] = ec._Response_status(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Response_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Response_status(ctx context.Context, field graphql.CollectedField, obj *database.Response) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Response"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Response_message(ctx context.Context, field graphql.CollectedField, obj *database.Response) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Response"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var ticketImplementors = []string{"Ticket"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Ticket(ctx context.Context, sel []query.Selection, obj *database.Ticket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, ticketImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ticket")
		case "orderNo":
			out.Values[i] = ec._Ticket_orderNo(ctx, field, obj)
		case "purchasedBy":
			out.Values[i] = ec._Ticket_purchasedBy(ctx, field, obj)
		case "noOfTickets":
			out.Values[i] = ec._Ticket_noOfTickets(ctx, field, obj)
		case "eventId":
			out.Values[i] = ec._Ticket_eventId(ctx, field, obj)
		case "eventName":
			out.Values[i] = ec._Ticket_eventName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Ticket_orderNo(ctx context.Context, field graphql.CollectedField, obj *database.Ticket) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Ticket"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrderNo
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Ticket_purchasedBy(ctx context.Context, field graphql.CollectedField, obj *database.Ticket) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Ticket"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PurchasedBy
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Ticket_noOfTickets(ctx context.Context, field graphql.CollectedField, obj *database.Ticket) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Ticket"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NoOfTickets
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Ticket_eventId(ctx context.Context, field graphql.CollectedField, obj *database.Ticket) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Ticket"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventId
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Ticket_eventName(ctx context.Context, field graphql.CollectedField, obj *database.Ticket) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Ticket"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventName
	return graphql.MarshalString(res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel []query.Selection, obj *database.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, userImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "userId":
			out.Values[i] = ec._User_userId(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._User_userName(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._User_organization(ctx, field, obj)
		case "location":
			out.Values[i] = ec._User_location(ctx, field, obj)
		case "isOrganizer":
			out.Values[i] = ec._User_isOrganizer(ctx, field, obj)
		case "salutation":
			out.Values[i] = ec._User_salutation(ctx, field, obj)
		case "mobileNumber":
			out.Values[i] = ec._User_mobileNumber(ctx, field, obj)
		case "imageUploadId":
			out.Values[i] = ec._User_imageUploadId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _User_userId(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserId
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_userName(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Email
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_organization(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Organization
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Location
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _User_isOrganizer(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsOrganizer
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _User_salutation(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Salutation
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_mobileNumber(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MobileNumber
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_imageUploadId(ctx context.Context, field graphql.CollectedField, obj *database.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ImageUploadId
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	return ec.___Type(ctx, field.Selections, &res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	return ec.___Type(ctx, field.Selections, &res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	return ec.___Type(ctx, field.Selections, &res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`# Response is a generic response from a graphql query or mutation
type Response {
    status: Boolean!
    message: String!
}

type Category {
    id: ID!
    name: String!
    description: String!
    noOfEvents: Int!
    imageData: String
    imageSize: String
}

type OrganizerProfile {
    id: ID!
    name: String!
    userFirstName: String!
    description: String!
    website: String!
    status: String!
    bankId: ID!
    billingId: ID!
    uploadId: ID
    userId: ID!
    agreementUploadId: String!
    isActive: Int!
    etEarnings: Float!
    revenue: Float!
    totalEtEarning: String!
    revenueGenerated: String!
    etCommission: Float!
    eventsCount: Int!
    etNotes: String!
}

type Event {
    id: ID!
    name: String!
    imageData: String!
    startDate: String!
    startTime: String!
    endDate:   String!
    endTime: String!
    description: String!
    location: String!
    organizerName: String!
    organizerId: ID!
    userName: String!
    status: String!
    publishDate: String!
    types: [String!]!
    categories: [String!]!
    soldAmount: Float!
    ticketsSold: Int!
    isFeatured: Boolean!
    venueCity: String!
    organizerID: ID!
    revenue: Float!
    totalRevenue: String!
    ticketLiveDays: Int!
    pageHits: Int!
    deactivated: Boolean!
    currency: String!
}

type Ticket {
   orderNo: String!
   purchasedBy: String!
   noOfTickets: Int!
   eventId: ID!
   eventName: String!
}

type User {
    userId: String!
    userName: String!
    email: String!
    organization: String!
    location: String
    isOrganizer: Boolean!
    salutation: String!
    mobileNumber: String!
    imageUploadId: String

}

type Position {
    id: Int!
    name: String!
    noOfEvents: Int!
    description: String
}

type EventType {
    id: Int!
    name: String!
    description: String
    noOfEvents: Int!
}

type Interest {
    id: Int!
    name: String!
    noOfEvents: Int!
    description: String
}

type Payout {
    id: ID!
    name: String!
    endDate: String!
    sold: Int!
    saleAmount: Float!
    totalSaleAmount: String!
    taxAmount: Float!
    totalTaxAmount: String!
    etShare: Float!
    totalEtShare: String!
    payoutAmount: Float!
    totalPayoutAmount: String!
    status: String!
}

type OrganizerData {
    agreementId: String!
    uploadId: String!
    organizerProfile: OrganizerProfile!
    userProfile: User!
}

type Region {
    id: Int!
    name: String!
    noOfEvents: Int!
}

type EventsOverview {
    eventsHeld: Int!
    ticketsSold: Int!
    revenue: Float!
    totalRevenue: String!
}

type Attendee {
    attendee: [String!]
    eventName: String
    organizerName: String!
}

type Query {
    getCategories(offset: Int!): [Category!]
    getCategoryById(id: ID!): Category!
    getEventList(offset: Int!): [Event!]
    getOngoingEvents(offset: Int!): [Event!]
    getTopEvents(duration: String!): [Event!]
    getEventById(id: ID!): Event!
    getTicketList(offset: Int!): [Ticket]!
    getUserList(offset: Int!): [User!]
    getEventTypeById(id: Int!): EventType!
    getPositionByID(id: Int!): Position!
    getOrganizerByID(id: ID!): OrganizerData!
    getOrganizersEventList(id: ID!, offset: Int!): [Event!]
    getInterestByID(id: Int!): Interest!
    getPayoutDetails(offset: Int!): [Payout!]
    getRegionByID(id: Int!): Region!
    getUserProfilesCount: Int!
    getOrganizerProfilesCount: Int!
    getTotalEventsCreated: Int!
    getRecentEvents: [Event!]
    totalEtEarnings: String!
    getEventAttendees(eventId: String!, organizerId: String!, offset: Int!): [Attendee!]
    getApprovedOrganizersList: [OrganizerProfile!]
    getGlobalEtCommissionRate: Float!
    getOrganizersReport(offset: Int!): [OrganizerProfile!]
    getEventPageHitsByID(eventId: String!): Int!
    listOfInterests(offset: Int!): [Interest!]
    listEventTypes(offset: Int!): [EventType!]
    listPositions(offset: Int!): [Position!]
    listRegions(offset: Int!): [Region!]
    reportsEventList(id: String!): [Event!]
    organizerProfileList(status: String!, offset: Int!): [OrganizerProfile!]
    upcomingPayouts(offset: Int!, limit: Int!): [Payout!]
    totalRevenueGenerated: String!
    getEventsOverview: EventsOverview!
    getEventSpecificReport(id: ID!): Event!
    exhibitorEnquiriesCount(eventID: String!): Int!
    sponsorEnquiriesCount(eventID: String!): Int!
    totalBrochureRequests(eventID: String!): Int!
}

type Mutation {
    activateEventByID(eventID: String!): Response!
    changeOrganizersStatus(organizerId: String!, status:Int!, value: Boolean!): Response!
    createCategory(name: String!, description: String!, imageSize: String!, imageData: String!): Response!
    editCategory(id: ID!, newName: String!, newDescription: String!, imageSize: String!, imageData: String!): Response!
    updateFeaturedEvent(id: ID!, feature: Boolean!): Response!
    approveOrganizer(id: String!, organizer: String!, email: String!): Response!
    createNewEventType(eventTypeName: String!, desc: String!): Response!
    createNewJobPosition(name: String!, desc: String!): Response!
    createAreaOfInterest(name: String!, desc: String!): Response!
    createNewRegion(name:String!): Response!
    deactivateEventByID(eventID: String!): Response!
    markAsPaidByEventId(eventId: String!): Response!
    rejectOrganizerByID(id: ID!, reason: String!, desc: String!): Response!
    updateJobPositionById(id: Int!, name: String!, desc: String!): Response!
    updateAreaOfInterest(id: Int!, name: String!, desc: String!): Response!
    updateRegionByID(id: Int!, name:String!): Response!
    updateOrganizer(description: String!, website: String!, agreement_uid: String!, o_id: String!, fname: String!, lname: String!, salutation: String!, mobile: String!, blogUrl: String!, user_id: String!, etCommission: Float!, etNotes: String!): Response!
    updateEventType(id: Int!, eventTypeName: String!, desc: String!): Response!
    updateGlobalEtCommissionRate(etCommission: Float!): Response!
    updateEventEtCommission(eventId: String!, etCommission: Float!): Response!
}`)
